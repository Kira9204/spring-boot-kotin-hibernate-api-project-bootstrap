import java.text.SimpleDateFormat

plugins {
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.21'
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.21'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'

allOpen {
	annotation("javax.persistence.Entity")
	annotation("javax.persistence.MappedSuperclass")
	annotation("javax.persistence.Embeddable")
}


group = 'se.erikwelander'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

  implementation "commons-validator:commons-validator:1.6"
	implementation "org.glassfish.jersey.media:jersey-media-multipart:2.28"
	implementation "org.apache.tika:tika-core:1.20"

	// To compile with java 11
	implementation('javax.xml.bind:jaxb-api:2.3.1')
	implementation('javax.activation:activation:1.1.1')
	implementation('org.glassfish.jaxb:jaxb-runtime:2.3.2')

	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

bootJar {
	manifest {
		attributes(
				'Built-By': System.properties['user.name'],
				'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Created-By': "Gradle ${gradle.gradleVersion}",
				'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
				'Implementation-Version': "${project.version}"
		)
	}
}

bootRun {
	systemProperties System.properties
}
